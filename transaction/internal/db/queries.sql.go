// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const findBalanceByUserId = `-- name: FindBalanceByUserId :one
SELECT id, balance, user_id, created_at, updated_at FROM users_balance WHERE user_id = ?
`

func (q *Queries) FindBalanceByUserId(ctx context.Context, userID int32) (UsersBalance, error) {
	row := q.db.QueryRowContext(ctx, findBalanceByUserId, userID)
	var i UsersBalance
	err := row.Scan(
		&i.ID,
		&i.Balance,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findTransactionById = `-- name: FindTransactionById :one
SELECT id, value, from_user_id, to_user_id, created_at FROM transactions WHERE id = ?
`

func (q *Queries) FindTransactionById(ctx context.Context, id int32) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, findTransactionById, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Value,
		&i.FromUserID,
		&i.ToUserID,
		&i.CreatedAt,
	)
	return i, err
}

const findTransactionByTimestamps = `-- name: FindTransactionByTimestamps :many
SELECT id, value, from_user_id, to_user_id, created_at FROM transactions AS t WHERE t.created_at BETWEEN ? AND ?
`

type FindTransactionByTimestampsParams struct {
	FromCreatedAt sql.NullTime
	ToCreatedAt   sql.NullTime
}

func (q *Queries) FindTransactionByTimestamps(ctx context.Context, arg FindTransactionByTimestampsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, findTransactionByTimestamps, arg.FromCreatedAt, arg.ToCreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.FromUserID,
			&i.ToUserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTransactionsByReceiverId = `-- name: FindTransactionsByReceiverId :many
SELECT id, value, from_user_id, to_user_id, created_at FROM transactions WHERE to_user_id = ?
`

func (q *Queries) FindTransactionsByReceiverId(ctx context.Context, toUserID int32) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, findTransactionsByReceiverId, toUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.FromUserID,
			&i.ToUserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTransactionsBySenderId = `-- name: FindTransactionsBySenderId :many
SELECT id, value, from_user_id, to_user_id, created_at FROM transactions WHERE from_user_id = ?
`

func (q *Queries) FindTransactionsBySenderId(ctx context.Context, fromUserID int32) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, findTransactionsBySenderId, fromUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.FromUserID,
			&i.ToUserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBalance = `-- name: InsertBalance :exec
INSERT INTO users_balance (balance, user_id) VALUES(?,?)
`

type InsertBalanceParams struct {
	Balance sql.NullString
	UserID  int32
}

func (q *Queries) InsertBalance(ctx context.Context, arg InsertBalanceParams) error {
	_, err := q.db.ExecContext(ctx, insertBalance, arg.Balance, arg.UserID)
	return err
}

const insertNotification = `-- name: InsertNotification :exec
INSERT INTO notifications (transaction_id) VALUES(?)
`

func (q *Queries) InsertNotification(ctx context.Context, transactionID int32) error {
	_, err := q.db.ExecContext(ctx, insertNotification, transactionID)
	return err
}

const insertTransaction = `-- name: InsertTransaction :exec
INSERT INTO transactions (value,from_user_id,to_user_id) VALUES(?,?,?)
`

type InsertTransactionParams struct {
	Value      string
	FromUserID int32
	ToUserID   int32
}

func (q *Queries) InsertTransaction(ctx context.Context, arg InsertTransactionParams) error {
	_, err := q.db.ExecContext(ctx, insertTransaction, arg.Value, arg.FromUserID, arg.ToUserID)
	return err
}

const updateBalance = `-- name: UpdateBalance :exec
UPDATE users_balance SET balance = ?, updated_at = CURRENT_TIMESTAMP WHERE user_id = ?
`

type UpdateBalanceParams struct {
	Balance sql.NullString
	UserID  int32
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateBalance, arg.Balance, arg.UserID)
	return err
}
