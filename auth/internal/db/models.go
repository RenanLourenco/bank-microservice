// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type UsersUserType string

const (
	UsersUserTypeCommon UsersUserType = "common"
	UsersUserTypeStore  UsersUserType = "store"
)

func (e *UsersUserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersUserType(s)
	case string:
		*e = UsersUserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersUserType: %T", src)
	}
	return nil
}

type NullUsersUserType struct {
	UsersUserType UsersUserType
	Valid         bool // Valid is true if UsersUserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UsersUserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersUserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersUserType), nil
}

type User struct {
	ID        int32
	Name      string
	Email     string
	Password  string
	Cpf       sql.NullString
	Cnpj      sql.NullString
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	UserType  UsersUserType
}
